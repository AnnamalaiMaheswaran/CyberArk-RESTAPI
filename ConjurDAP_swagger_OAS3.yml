---
openapi: 3.0.3
info:
  title: "CyberArk REST API [PUBLIC]"
  description: "All available requests in CyberArk Privileged Account Security Web Services for All Versions\n\n**Last Updated Version:** v11.7\n\n# THIS IS UNOFFICIAL DOCUMENTATION\n\n## New Features & Additions\n\n* Bulk Upload Accounts endpoints now available in Accounts > Bulk Upload Accounts.\n* Authentication Methods can be managed via API.\n* All Platform Management can be managed via API.\n* Initial documentation of CyberArk's IDaptive Identity Platform API is available within the \"IDaptive Identity Platform\" folder.\n\nHappy automating!\n\n## Getting Started Guide\n\n[Getting Started with REST Using Postman](https://github.com/infamousjoeg/CyberArk-RESTAPI/blob/master/Getting%20Started%20with%20REST%20Using%20Postman.pdf) (PDF)\n\n## Community Tools\n\n* [psPAS](https://github.com/pspete/psPAS) - PowerShell Module for CyberArk's REST API\n* [CredentialRetriever](https://github.com/pspete/CredentialRetriever) - PowerShell Module for CyberArk's Application Access Manager (AAM)\n* [pyAIM](https://github.com/infamousjoeg/pyAIM) - Python Client Library for CyberArk's Application Access Manager (AAM)\n\n## Code Examples\n\n* [cyberark/epv-api-scripts](https://github.com/cyberark/epv-api-scripts)\n* [infamousjoeg on GitHub](https://github.com/infamousjoeg?tab=repositories)\n* [CyberArk's Automation Greatest Hits (Awesome List of Automation)](https://cybr.rocks/greatesthits)\n\n## YouTube Videos Playlist\n\n* [CyberArk Videos Playlist Curated by InfamousJoeG](https://www.youtube.com/playlist?list=PL-p_9AwMQDmkS6rCXQrINn0Xc7dv73dWU)\n\n## Maintainer\n\n[Joe Garcia](https://github.com/infamousjoeg)\n\n[Buy me a coffee](https://www.buymeacoffee.com/infamousjoeg)\n\n## Status Codes\n\n| Status Name | Status Code | Status Description |\n|---|---|---|\n| Success | 200 | The request succeeded. The actual response will depend on the request method used. |\n| Created | 201 | The request was fulfilled and resulted in a new resource being created. |\n| Bad Request | 400 | The request could not be understood by the server due to incorrect syntax. |\n| Unauthorized | 401 | The request requires user authentication. |\n| Forbidden | 403 | The server received and understood the request, but will not fulfill it. Authorization will not help and the request MUST NOT be repeated. |\n| Not Found | 404 | The server did not find anything that matches the Request-URI. No indication is given of whether the condition is temporary or permanent. |\n| Conflict | 409 | The request could not be completed due to a conflict with the current state of the resource. |\n| Internal Server Error | 500 | The server encountered an unexpected condition which prevented it from fulfilling the request. |\n\n_NOTE: If you are having issues with DEL or PUT methods, make sure that your Password Vault Web Access (PVWA) Server's IIS instance does not include WebDav Publishing.  This will cause known issues._"
  version: 1.0.0
  contact: {}
servers:
  - url: "{{dapHostname}}"
  - url: "https://dap.joegarcia.dev"
paths:
  "/authn/{dapAccount}/api_key":
    put:
      tags:
        - Conjur/DAP
        - Authentication
        - Rotate
      summary: Rotate A Host API Key
      description: "Rotates the API key of a host you can update.\n\nNote that the body of the request must be the empty string."
      operationId: rotateAHostApiKey
      parameters:
        - name: role
          in: query
          schema:
            type: string
            example: "host:{{dapHostID}}"
      responses:
        "200":
          description: ""
    parameters:
      - name: dapAccount
        in: path
        required: true
        schema:
          type: string
  "/authn/{dapAccount}/login":
    get:
      tags:
        - Conjur/DAP
        - Authentication
      summary: Login
      description: "Gets the API key of a user given the username and password via HTTP Basic Authentication.\n\nPasswords are stored in the Conjur database using bcrypt with a work factor of 12. Therefore, login is a fairly expensive operation. However, once the API key is obtained, it may be used to inexpensively obtain access tokens by calling the Authenticate method. An access token is required to use most other parts of the Conjur API.\n\nYour HTTP/REST client probably provides HTTP basic authentication support. For example, curl and all of the Conjur client libraries provide this.\n\nNote that machine roles (Hosts) do not have passwords and do not need to login."
      operationId: login
      requestBody:
        content:
          text/plain:
            example: ""
      responses:
        "200":
          description: 200 OK
          headers:
            Cache-Control:
              schema:
                type: string
                example: "max-age=0, private, must-revalidate"
            Connection:
              schema:
                type: string
                example: keep-alive
            Date:
              schema:
                type: string
                example: "Tue, 18 Feb 2020 01:43:53 GMT"
            ETag:
              schema:
                type: string
                example: "W/\"8f35b6e793c18b15795ed7cdc1b71529\""
            Server:
              schema:
                type: string
                example: nginx
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            X-Content-Type-Options:
              schema:
                type: string
                example: nosniff
            X-Frame-Options:
              schema:
                type: string
                example: SAMEORIGIN
            X-Request-Id:
              schema:
                type: string
                example: a2eba1d5-0182-400f-91ed-35af70261f15
            X-Runtime:
              schema:
                type: string
                example: "0.550903"
            X-XSS-Protection:
              schema:
                type: string
                example: 1; mode=block
          content:
            text/plain:
              examples:
                200 OK:
                  value: 3nqbsaa36jpw802fgzznk2d976t11wfzha12awdrfjrmp1qb28jcfz1
    parameters:
      - name: dapAccount
        in: path
        required: true
        schema:
          type: string
  "/authn/{dapAccount}/password":
    put:
      tags:
        - Conjur/DAP
        - Authentication
      summary: Change Your Password
      description: "Changes a user’s password. You must provide the login name and current password or API key of the user whose password is to be updated in an HTTP Basic Authentication header. Also replaces the user’s API key with a new securely generated random value. You can fetch the new API key by using Login.\n\nYour HTTP/REST client probably provides HTTP basic authentication support. For example, curl and all of the Conjur client libraries provide this.\n\nNote that machine roles (Hosts) do not have passwords. They authenticate using their API keys, while passwords are only used by human users."
      operationId: changeYourPassword
      requestBody:
        content:
          text/plain:
            example: "{{dapNewPassword}}"
      responses:
        "200":
          description: ""
    parameters:
      - name: dapAccount
        in: path
        required: true
        schema:
          type: string
  "/authn/{dapAccount}/{dapUsername}/authenticate":
    post:
      tags:
        - Conjur/DAP
        - Authentication
      summary: Authenticate
      description: "Gets a short-lived access token, which can be used to authenticate requests to (most of) the rest of the Conjur API. A client can obtain an access token by presenting a valid login name and API key.\n\nThe login must be URL encoded. For example, `alice@devops` must be encoded as `alice%40devops`.\n\nFor host authentication, the login is the host ID with the prefix `host/`. For example, the host webserver would login as `host/webserver`, and would be encoded as `host%2Fwebserver`.\n\nFor API usage, the access token is ordinarily passed as an HTTP Authorization “Token” header.\n\n**Note: Base64-encode the JSON Web Token (JWT) returned in the response for use as the {{dapToken}}.**"
      operationId: authenticate
      requestBody:
        content:
          text/plain:
            example: "{{dapAPIKey}}"
      responses:
        "200":
          description: ""
    parameters:
      - name: dapAccount
        in: path
        required: true
        schema:
          type: string
      - name: dapUsername
        in: path
        required: true
        schema:
          type: string
  /health:
    get:
      tags:
        - Conjur/DAP
      summary: Health
      description: Health
      operationId: health
      requestBody:
        content:
          application/form-urlencoded:
            schema:
              type: object
              properties: {}
            example: {}
      responses:
        "200":
          description: ""
  /info:
    get:
      tags:
        - Conjur/DAP
      summary: Information
      description: Information
      operationId: information
      responses:
        "200":
          description: 200 OK
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Length:
              schema:
                type: string
                example: "1250"
            Date:
              schema:
                type: string
                example: "Tue, 18 Feb 2020 01:33:54 GMT"
            Server:
              schema:
                type: string
                example: nginx
          content:
            application/json:
              schema:
                type: object
                properties:
                  authenticators:
                    type: object
                    properties:
                      configured:
                        type: array
                        items:
                          type: string
                          example: authn
                        example:
                          - authn
                      enabled:
                        type: array
                        items:
                          type: string
                          example: authn
                        example:
                          - authn
                      installed:
                        type: array
                        items:
                          type: string
                          example: authn
                        example:
                          - authn
                          - authn-iam
                          - authn-k8s
                          - authn-ldap
                          - authn-oidc
                  configuration:
                    type: object
                    properties:
                      conjur:
                        type: object
                        properties:
                          account:
                            type: string
                            example: cyberarkdemo
                          hostname:
                            type: string
                            example: dap.joegarcia.dev
                          master_altnames:
                            type: array
                            items:
                              type: string
                              example: dap.joegarcia.dev
                            example:
                              - dap.joegarcia.dev
                              - localhost
                              - conjur
                          role:
                            type: string
                            example: master
                  release:
                    type: string
                    example: "11.1"
                  role:
                    type: string
                    example: master
                  services:
                    type: object
                    properties:
                      evoke:
                        type: object
                        properties:
                          arch:
                            type: string
                            example: amd64
                          desired:
                            type: string
                            example: i
                          err:
                            nullable: true
                            example: ~
                          name:
                            type: string
                            example: conjur-evoke
                          status:
                            type: string
                            example: i
                          version:
                            type: string
                            example: 5.14.2.0-e5cfc56
                      ldap-sync:
                        type: object
                        properties:
                          arch:
                            type: string
                            example: amd64
                          desired:
                            type: string
                            example: i
                          err:
                            nullable: true
                            example: ~
                          name:
                            type: string
                            example: conjur-ldap-sync
                          status:
                            type: string
                            example: i
                          version:
                            type: string
                            example: 2.1.4.0-3c52a79
                      possum:
                        type: object
                        properties:
                          arch:
                            type: string
                            example: amd64
                          desired:
                            type: string
                            example: i
                          err:
                            nullable: true
                            example: ~
                          name:
                            type: string
                            example: conjur-possum
                          status:
                            type: string
                            example: i
                          version:
                            type: string
                            example: 1.4.2.0-982edbd
                      ui:
                        type: object
                        properties:
                          arch:
                            type: string
                            example: amd64
                          desired:
                            type: string
                            example: i
                          err:
                            nullable: true
                            example: ~
                          name:
                            type: string
                            example: conjur-ui
                          status:
                            type: string
                            example: i
                          version:
                            type: string
                            example: 2.10.15.0-5289d616
                  version:
                    type: string
                    example: 5.6.0
              examples:
                200 OK:
                  value:
                    authenticators:
                      configured:
                        - authn
                      enabled:
                        - authn
                      installed:
                        - authn
                        - authn-iam
                        - authn-k8s
                        - authn-ldap
                        - authn-oidc
                    configuration:
                      conjur:
                        account: cyberarkdemo
                        hostname: dap.joegarcia.dev
                        master_altnames:
                          - dap.joegarcia.dev
                          - localhost
                          - conjur
                        role: master
                    release: "11.1"
                    role: master
                    services:
                      evoke:
                        arch: amd64
                        desired: i
                        err: ~
                        name: conjur-evoke
                        status: i
                        version: 5.14.2.0-e5cfc56
                      ldap-sync:
                        arch: amd64
                        desired: i
                        err: ~
                        name: conjur-ldap-sync
                        status: i
                        version: 2.1.4.0-3c52a79
                      possum:
                        arch: amd64
                        desired: i
                        err: ~
                        name: conjur-possum
                        status: i
                        version: 1.4.2.0-982edbd
                      ui:
                        arch: amd64
                        desired: i
                        err: ~
                        name: conjur-ui
                        status: i
                        version: 2.10.15.0-5289d616
                    version: 5.6.0
  "/policies/{dapAccount}/policy/root":
    post:
      tags:
        - Conjur/DAP
        - Policy
      summary: Seed Follower Service Policy Append to Root Policy
      description: Seed Follower Service Policy Append to Root Policy
      operationId: seedFollowerServicePolicyAppendToRootPolicy
      requestBody:
        content:
          text/plain:
            example: "- !policy\n  id: seed-generation\n  body:\n  - !webservice\n  - !layer consumers\n  - !permit\n    role: !layer consumers\n    privilege: [ \"execute\" ]\n    resource: !webservice\n\n- !grant\n  role: !layer seed-generation/consumers\n  member: !host /conjur/authn-k8s/k8s-follower/apps/dap/service_account/conjur-cluster\n\n- !grant\n  role: !layer seed-generation/consumers\n  member: !host /conjur/authn-k8s/okd-follower/apps/dap/service_account/conjur-cluster"
      responses:
        "200":
          description: ""
    parameters:
      - name: dapAccount
        in: path
        required: true
        schema:
          type: string
  "/policies/{dapAccount}/policy/{dapPolicyID}":
    put:
      tags:
        - Conjur/DAP
        - Policy
      summary: Replace Policy
      description: "Loads or replaces a Conjur policy document.\n\nAny policy data which already exists on the server but is **not** explicitly specified in the new policy file **will be deleted**."
      operationId: replacePolicy
      requestBody:
        content:
          text/plain:
            example: "---\n- !user mike\n\n- !user john\n\n- !user paul\n\n- !user eva\n\n- !group admins\n\n- !group devops\n\n- !grant\n  role: !group admins\n  members:\n   - !user mike\n   - !user eva\n\n- !grant\n  role: !group devops\n  members:\n   - !user john\n   - !user paul\n   - !group admins\n   - !user admin\n\n- !permit\n  role: !group admins\n  privileges:\n   - read\n   - update\n   - create\n  resources:\n   - !policy root\n\n- !policy\n  id: conjur\n  owner: !group /devops\n\n- !policy\n  id: secrets\n  owner: !group /devops\n  \n- !policy\n  id: ansible\n  owner: !group /devops"
      responses:
        "200":
          description: ""
    post:
      tags:
        - Conjur/DAP
        - Policy
      summary: Append to a Policy
      description: Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error.
      operationId: appendToAPolicy
      requestBody:
        content:
          text/plain:
            example: "- !user george"
      responses:
        "200":
          description: ""
    parameters:
      - name: dapAccount
        in: path
        required: true
        schema:
          type: string
      - name: dapPolicyID
        in: path
        required: true
        schema:
          type: string
  "/resources/{dapAccount}":
    get:
      tags:
        - Conjur/DAP
      summary: List Groups
      description: List Groups
      operationId: listGroups
      parameters:
        - name: kind
          in: query
          schema:
            type: string
            example: group
      responses:
        "200":
          description: 200 OK - No Groups
          headers:
            Cache-Control:
              schema:
                type: string
                example: "max-age=0, private, must-revalidate"
            Connection:
              schema:
                type: string
                example: keep-alive
            Date:
              schema:
                type: string
                example: "Tue, 18 Feb 2020 01:51:22 GMT"
            ETag:
              schema:
                type: string
                example: "W/\"d751713988987e9331980363e24189ce\""
            Server:
              schema:
                type: string
                example: nginx
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            X-Content-Type-Options:
              schema:
                type: string
                example: nosniff
            X-Frame-Options:
              schema:
                type: string
                example: SAMEORIGIN
            X-Request-Id:
              schema:
                type: string
                example: fdb29fc3-759b-4c7e-a3b8-f3bb72aaac54
            X-Runtime:
              schema:
                type: string
                example: "0.004353"
            X-XSS-Protection:
              schema:
                type: string
                example: 1; mode=block
          content:
            application/json:
              schema:
                type: array
                items: {}
                example: []
              examples:
                200 OK - No Groups:
                  value: []
    parameters:
      - name: dapAccount
        in: path
        required: true
        schema:
          type: string
  /secrets:
    get:
      tags:
        - Conjur/DAP
        - Secrets
      summary: Batch Retrieval
      description: Fetches multiple secret values in one invocation. It’s faster to fetch secrets in batches than to fetch them one at a time.
      operationId: batchRetrieval
      parameters:
        - name: variable_ids
          in: query
          schema:
            type: string
            example: "cyberarkdemo:variable:ec2_deploy%2Faccess_key_id,cyberarkdemo:variable:ec2_deploy%2Faccess_key_secret"
      responses:
        "200":
          description: ""
  "/secrets/{dapAccount}/variable/{dapSecretID}":
    get:
      tags:
        - Conjur/DAP
        - Secrets
      summary: Retrieve A Secret
      description: "Fetches the value of a secret from the specified Variable. The latest version will be retrieved unless the version parameter is specified. The twenty most recent secret versions are retained.\n\nThe secret data is returned in the response body.\n\nNote: Conjur will allow you to add a secret to any resource, but the best practice is to store and retrieve secret data only using Variable resources."
      operationId: retrieveASecret
      responses:
        "200":
          description: ""
    post:
      tags:
        - Conjur/DAP
        - Secrets
      summary: Add A Secret
      description: "Creates a secret value within the specified Variable.\n\nNote: Conjur will allow you to add a secret to any resource, but the best practice is to store and retrieve secret data only using Variable resources."
      operationId: addASecret
      requestBody:
        content:
          text/plain:
            example: "{{dapSecretValue}}"
      responses:
        "200":
          description: ""
    parameters:
      - name: dapAccount
        in: path
        required: true
        schema:
          type: string
      - name: dapSecretID
        in: path
        required: true
        schema:
          type: string
  "/secrets/{dapAccount}/variable/{dapSecretK8sCaCert}":
    post:
      tags:
        - Conjur/DAP
        - Secrets
      summary: Add Kubernetes CA Certificate
      description: Add Kubernetes CA Certificate
      operationId: addKubernetesCaCertificate
      requestBody:
        content:
          text/plain:
            example: "-----BEGIN CERTIFICATE-----\nMIICyDCCAbCgAwIBAgIBADANBgkqhkiG9w0BAQsFADAVMRMwEQYDVQQDEwprdWJl\ncm5ldGVzMB4XDTE5MDMxODE5NTE0NloXDTI5MDMxNTE5NTE0NlowFTETMBEGA1UE\nAxMKa3ViZXJuZXRlczCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAPSr\ni+aUjWdfe7I+snYG2CXEgvP8DVVbLtJn/MzWiIiuqqT14ozkrL7u+a/jLw0GLv4e\nbPXUdVy6Ob80DEuTJZ9Jb+MOPSP7Xsce9nPMwUPN17ucH+m4BLYC/60PuZkrQF95\neLQ38qoQIgnViYYnpyNLI5lY23aNLsqHK6Hk/DgzrfQTaBeIqpsvu0/QKew2Tjq2\n7gRhd8ZRRmwquO/MNyOBxkQ/B0iBq20ZwOoG/3UMw3gynJEcMwGlFcmXETxxxtnj\nlJIGNg3c0L1Lk4CRCRDoi00zE27heHdNXS0nhXSvOnNSM3Pjcr92kLg7NArBv1Oo\ncLDoAeFvt9Hmoc0nwEUCAwEAAaMjMCEwDgYDVR0PAQH/BAQDAgKkMA8GA1UdEwEB\n/wQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAMEsF+w2wmLGl9EQ0ohtVBMQivmo\nHWsmchSRGoIo9U3Ns+z40Lm7u0qD9mKi3hFS7s73NioRF3XWKZZ2g0BxhUfiX7oe\nKlEN+p8WL2ld4ELHzI+xd5TfYJadn4QYrY0joE65X74TCuCe9quoFtDK7sENn6+R\njkh821YJJH3qy56rwmxmXcmwdtStFoFiF93RLLpBTfKvLiTnIF3Yj5Kf9qcRBd9Z\nKMWaLCavB2OWoE31SfGGetgi5grJxoUcRxVGZX4F/nyIjNEvly/nfg1X0igfn0fz\nB8U+sRYaJN6sD/lFV68qgbXH+BaV/Y+hyrTLLtoPoCXzO16vavVsJSHhvVk=\n-----END CERTIFICATE-----"
      responses:
        "200":
          description: ""
    parameters:
      - name: dapAccount
        in: path
        required: true
        schema:
          type: string
      - name: dapSecretK8sCaCert
        in: path
        required: true
        schema:
          type: string
  "/secrets/{dapAccount}/variable/{dapSecretK8sServiceAccountToken}":
    post:
      tags:
        - Conjur/DAP
        - Secrets
      summary: Add Kubernetes Service Account Token
      description: Add Kubernetes Service Account Token
      operationId: addKubernetesServiceAccountToken
      requestBody:
        content:
          text/plain:
            example: eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJkYXAiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlY3JldC5uYW1lIjoiY29uanVyLWNsdXN0ZXItdG9rZW4tYm1ubTkiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiY29uanVyLWNsdXN0ZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiI5MDhkN2ExNy1hMjdkLTExZTktYmNkYy0wMjUwMDAwMDAwMDEiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6ZGFwOmNvbmp1ci1jbHVzdGVyIn0.VRCYTFoweZb2epcMvOSeTmdyEYzWF595YFAN4aWVBXP5YD__pJ1mRhRieL5H-k0fXgBKznTHXBg8qZVU5Cf1ha9nzyefnnorQQ6DDMGrw_3gZ6zoiIVKr94K9il_wZ7fjYkOgdJCnCmIk_Mnla-4THkQmIhRRIusqtXlfwk9GryHavr4ZqYREJkF8vQ3C6I8mRPSxkSyhJGGDDKEqoW7tM6Dy2D50lP6olUWgHP9o8M2niPv-1FIdn96Ulvwhdx6a87VOqfPIaQKgwDMIa3DkAl-BX2rL5NhdsctmlGR_4Ygz0rSOfwK0_Whfc3vp9ox5tUA5aPcUh465be4u1kawg
      responses:
        "200":
          description: ""
    parameters:
      - name: dapAccount
        in: path
        required: true
        schema:
          type: string
      - name: dapSecretK8sServiceAccountToken
        in: path
        required: true
        schema:
          type: string
  /whoami:
    get:
      tags:
        - Conjur/DAP
        - Authentication
      summary: Whoami
      description: "WhoAmI provides information about the client making an API request.\n\nIt can be used to help troubleshoot configuration by verifying authentication and the client IP address for audit and network access restrictions. For more information, see [Host Attributes](https://docs.cyberark.com/Product-Doc/OnlineHelp/AAM-DAP/Latest/en/Content/Operations/Policy/statement-ref-host.htm#Attribut)."
      operationId: whoami
      responses:
        "200":
          description: ""
tags:
  - name: Conjur/DAP
  - name: Authentication
  - name: Rotate
  - name: Secrets
  - name: Policy